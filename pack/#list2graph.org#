* home
** code
*** prod
****  career
***** proof
#+name: lista
#+begin_src elisp
  (org-element-map (org-element-parse-buffer 'headline )
      'headline
    (lambda(hl)
      (let ((parent (org-element-property :parent hl )))
        (and (eq (org-element-type parent) 'headline)
             (list (org-element-property :title parent) (org-element-property :title hl))))))

#+end_src

#+RESULTS: lista
| home   | code   |
| code   | prod   |
| prod   | career |
| career | proof  |

#+name: make-dot
#+BEGIN_SRC emacs-lisp :var table=lista :results output :exports none
  (mapcar #'(lambda (x)
                (princ (format "\"%s\" -> \"%s\";\n" (first x) (second x))))
          table)
#+END_SRC

#+RESULTS: make-dot
: "home" -> "code";
: "code" -> "prod";
: "prod" -> "career";
: "career" -> "proof";

#+BEGIN_SRC dot :file dependencias.pdf :cmdline -Tpdf :var input=make-dot :exports results
digraph {
   rankdir=LR;
   splines=true;
   node [shape=box, color=blue, URL="google.com"];
   $input
  }
#+END_SRC

#+RESULTS:
[[file:dependencias.pdf]]

#+CAPTION: Dependency diagram
